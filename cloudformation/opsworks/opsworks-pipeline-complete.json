{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"Stelligent CloudFormation Sample Template Static Web Server: Launches OpsWorks stack, layer, instances and associated resources to run a Node.js application provided by AWS. ** This template creates one or more Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters":{
    "S3BucketLambdaFunction":{
      "Type":"String",
      "Description":"S3 bucket to use for artifacts. Just bucket Name; not URL. IAM user should have access to the bucket.",
      "Default":"stelligent-training-public"
    },
    "AccessControl":{
      "Description":"AWS S3 bucket for aws",
      "Type":"String",
      "Default":"BucketOwnerFullControl"
    },
    "BucketName":{
      "Description":"AWS S3 bucket name for aws",
      "Type":"String",
      "Default":"opsworks-dist"
    },
    "ServiceRole":{
      "Default":"aws-opsworks-service-role",
      "Description":"The OpsWorks service role",
      "Type":"String",
      "MinLength":"1",
      "MaxLength":"64",
      "AllowedPattern":"[a-zA-Z][a-zA-Z0-9-]*",
      "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
    },
    "InstanceRole":{
      "Default":"aws-opsworks-ec2-role",
      "Description":"The OpsWorks instance role",
      "Type":"String",
      "MinLength":"1",
      "MaxLength":"64",
      "AllowedPattern":"[a-zA-Z][a-zA-Z0-9-]*",
      "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
    },
    "AppName":{
      "Default":"myapp",
      "Description":"The OpsWorks app name",
      "Type":"String",
      "MinLength":"1",
      "MaxLength":"64",
      "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
    },
    "S3Event":{
      "Description":"SNS topic event to monitor for S3 subscription",
      "Type":"String",
      "Default":"s3:ObjectCreated:*"
    },
    "Version":{
      "Type":"String",
      "Default":"1"
    }
  },
  "Resources":{
    "myStack":{
      "Type":"AWS::OpsWorks::Stack",
      "Properties":{
        "Name":{
          "Ref":"AWS::StackName"
        },
        "DefaultOs":"Amazon Linux 2015.09",
        "ConfigurationManager":{
          "Name":"Chef",
          "Version":"11.10"
        },
        "DefaultRootDeviceType":"ebs",
        "ServiceRoleArn":{
          "Fn::Join":[
            "",
            [
              "arn:aws:iam::",
              {
                "Ref":"AWS::AccountId"
              },
              ":role/",
              {
                "Ref":"ServiceRole"
              }
            ]
          ]
        },
        "DefaultInstanceProfileArn":{
          "Fn::Join":[
            "",
            [
              "arn:aws:iam::",
              {
                "Ref":"AWS::AccountId"
              },
              ":instance-profile/",
              {
                "Ref":"InstanceRole"
              }
            ]
          ]
        },
        "UseCustomCookbooks":"true",
        "UseOpsworksSecurityGroups":"true",
        "CustomCookbooksSource":{
          "Type":"archive",
          "Url":"https://s3.amazonaws.com/stelligent-training-public/public/codepipeline/aws-codepipeline-s3-aws-codedeploy_linux.zip"
        }
      }
    },
    "myLayer":{
      "Type":"AWS::OpsWorks::Layer",
      "DependsOn":"myApp",
      "Properties":{
        "StackId":{
          "Ref":"myStack"
        },
        "Type":"web",
        "Shortname":"web",
        "EnableAutoHealing":"true",
        "AutoAssignElasticIps":"false",
        "AutoAssignPublicIps":"true",
        "CustomSecurityGroupIds":[
          {
            "Fn::GetAtt":[
              "OpsWorksSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "Name":"MyStaticApp"
      }
    },
    "myAppInstance1":{
      "Type":"AWS::OpsWorks::Instance",
      "Properties":{
        "StackId":{
          "Ref":"myStack"
        },
        "LayerIds":[
          {
            "Ref":"myLayer"
          }
        ],
        "InstanceType":"t2.medium"
      }
    },
    "OpsWorksSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Allow inbound requests from the ELB to the OpsWorks instances",
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80"
          }
        ]
      }
    },
    "myApp":{
      "Type":"AWS::OpsWorks::App",
      "Properties":{
        "StackId":{
          "Ref":"myStack"
        },
        "Type":"static",
        "Shortname":"web",
        "Name":{
          "Ref":"AppName"
        },
        "AppSource":{
          "Type":"archive",
          "Url":"https://s3.amazonaws.com/stelligent-training-public/public/codepipeline/aws-codepipeline-s3-aws-codedeploy_linux.zip"
        }
      }
    },
    "SNSLambdaTopic":{
      "Type":"AWS::SNS::Topic",
      "Properties":{
        "Subscription":[
          {
            "Endpoint":{
              "Fn::GetAtt":[
                "ProcessSNSMessages",
                "Arn"
              ]
            },
            "Protocol":"lambda"
          }
        ],
        "TopicName":{
          "Ref":"AWS::StackName"
        }
      }
    },
    "LambdaInvokePermission":{
      "DependsOn":[
        "ProcessSNSMessages"
      ],
      "Properties":{
        "Action":"lambda:InvokeFunction",
        "FunctionName":{
          "Fn::GetAtt":[
            "ProcessSNSMessages",
            "Arn"
          ]
        },
        "Principal":"sns.amazonaws.com"
      },
      "Type":"AWS::Lambda::Permission"
    },
    "ProcessSNSMessages":{
      "Type":"AWS::Lambda::Function",
      "Properties":{
        "Handler":"index.handler",
        "Role":{
          "Fn::GetAtt":[
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code":{
          "ZipFile":{
            "Fn::Join":[
              "\n",
              [
                "console.log('Loading function');",
                "exports.handler = function(event, context) {",
                "var mymsg = JSON.parse(event.Records[0].Sns.Message);",
                "    console.log('value1 =', mymsg.key1);",
                "    console.log('value2 =', mymsg.key2);",
                "    console.log('value3 =', mymsg.key3);",
                "    context.succeed(mymsg.key1);  // Echo back the first key value",
                "    // context.fail('Something went wrong');",
                "};"
              ]
            ]
          }
        },
        "Runtime":"nodejs",
        "Timeout":"25"
      }
    },
    "LambdaExecutionRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Sid":"",
              "Effect":"Allow",
              "Principal":{
                "Service":"lambda.amazonaws.com"
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "Policies":[
          {
            "PolicyName":"root",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "logs:*"
                  ],
                  "Resource":"arn:aws:logs:*:*:*"
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "lambda:AddPermission"
                  ],
                  "Resource":[
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "mysnspolicy":{
      "Type":"AWS::SNS::TopicPolicy",
      "Properties":{
        "PolicyDocument":{
          "Id":"MyTopicPolicy",
          "Version":"2012-10-17",
          "Statement":[
            {
              "Sid":"My-statement-id",
              "Effect":"Allow",
              "Principal":{
                "AWS":"*"
              },
              "Action":"sns:Publish",
              "Resource":"*"
            }
          ]
        },
        "Topics":[
          {
            "Ref":"SNSLambdaTopic"
          }
        ]
      }
    },
    "CFNBucket":{
      "Type":"AWS::S3::Bucket",
      "DependsOn":"mysnspolicy",
      "Properties":{
        "VersioningConfiguration":{
          "Status":"Enabled"
        },
        "AccessControl":{
          "Ref":"AccessControl"
        },
        "BucketName":{
          "Fn::Join":[
            "",
            [
              {
                "Ref":"BucketName"
              },
              "-",
              {
                "Ref":"AWS::StackName"
              }
            ]
          ]
        },
        "NotificationConfiguration":{
          "TopicConfigurations":[
            {
              "Event":{
                "Ref":"S3Event"
              },
              "Topic":{
                "Ref":"SNSLambdaTopic"
              }
            }
          ]
        }
      }
    },
    "OpsWorksViaLambdaCustomActionType":{
      "Type":"AWS::CodePipeline::CustomActionType",
      "Properties":{
        "Category":"Deploy",
        "Provider":{
          "Ref":"AWS::StackName"
        },
        "Version":{
          "Ref":"Version"
        },
        "ConfigurationProperties":[
          {
            "Name":"Deploy-Bucket",
            "Required":true,
            "Key":false,
            "Secret":false
          },
          {
            "Name":"OpsWorks-Stack-ID",
            "Required":true,
            "Key":false,
            "Secret":false
          },
          {
            "Name":"OpsWorks-App-ID",
            "Required":true,
            "Key":true,
            "Secret":false
          }
        ],
        "InputArtifactDetails":{
          "MinimumCount":1,
          "MaximumCount":1
        },
        "OutputArtifactDetails":{
          "MinimumCount":0,
          "MaximumCount":0
        }
      }
    },
    "LambdaCodePipelineExecutionPolicy":{
      "DependsOn":[
        "CodePipelineLambdaRole"
      ],
      "Type":"AWS::IAM::Policy",
      "Properties":{
        "PolicyName":"LambdaRolePolicy",
        "Roles":[
          {
            "Ref":"CodePipelineLambdaRole"
          }
        ],
        "PolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Action":[
                "logs:*"
              ],
              "Resource":[
                "arn:aws:logs:*:*:*"
              ]
            },
            {
              "Effect":"Allow",
              "Action":[
                "codepipeline:PutJobSuccessResult",
                "codepipeline:PutJobFailureResult"
              ],
              "Resource":[
                "*"
              ]
            }
          ]
        }
      }
    },
    "CodePipelineLambdaRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "lambda.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/"
      }
    },
    "CodePipelineLambdaDummy":{
      "Type":"AWS::Lambda::Function",
      "DependsOn":[
        "CodePipelineLambdaRole",
        "LambdaCodePipelineExecutionPolicy"
      ],
      "Properties":{
        "Code":{
          "S3Bucket":{
            "Ref":"S3BucketLambdaFunction"
          },
          "S3Key":"Archive.zip"
        },
        "Role":{
          "Fn::GetAtt":[
            "CodePipelineLambdaRole",
            "Arn"
          ]
        },
        "Description":"Always return success",
        "Timeout":20,
        "Handler":"lambdadummy.handler",
        "Runtime":"nodejs",
        "MemorySize":128
      }
    },
    "CodePipelineStack":{
      "Type":"AWS::CodePipeline::Pipeline",
      "DependsOn":[
        "CodePipelineLambdaDummy",
        "myStack",
        "myLayer",
        "myApp",
        "myAppInstance1",
        "OpsWorksViaLambdaCustomActionType",
        "CFNBucket"
      ],
      "Properties":{
        "RoleArn":{
          "Fn::Join":[
            "",
            [
              "arn:aws:iam::",
              {
                "Ref":"AWS::AccountId"
              },
              ":role/AWS-CodePipeline-Service"
            ]
          ]
        },
        "Stages":[
          {
            "Name":"Source",
            "Actions":[
              {
                "InputArtifacts":[

                ],
                "Name":"Source",
                "ActionTypeId":{
                  "Category":"Source",
                  "Owner":"AWS",
                  "Version":"1",
                  "Provider":"S3"
                },
                "OutputArtifacts":[
                  {
                    "Name":"MyApp"
                  }
                ],
                "Configuration":{
                  "S3Bucket":{
                    "Fn::Join":[
                      "",
                      [
                        {
                          "Ref":"BucketName"
                        },
                        "-",
                        {
                          "Ref":"AWS::StackName"
                        }
                      ]
                    ]
                  },
                  "S3ObjectKey":"aws-codepipeline-s3-aws-codedeploy_linux.zip"
                },
                "RunOrder":1
              }
            ]
          },
          {
            "Name":"Deploy",
            "Actions":[
              {
                "InputArtifacts":[
                  {
                    "Name":"MyApp"
                  }
                ],
                "Name":"OpsWorks",
                "ActionTypeId":{
                  "Category":"Deploy",
                  "Owner":"Custom",
                  "Version":"1",
                  "Provider":{
                    "Ref":"AWS::StackName"
                  }
                },
                "OutputArtifacts":[

                ],
                "Configuration":{
                  "Deploy-Bucket":{
                    "Fn::Join":[
                      "",
                      [
                        {
                          "Ref":"BucketName"
                        },
                        "-",
                        {
                          "Ref":"AWS::StackName"
                        }
                      ]
                    ]
                  },
                  "OpsWorks-Stack-ID":{
                    "Ref":"myStack"
                  },
                  "OpsWorks-App-ID":{
                    "Ref":"myApp"
                  }
                },
                "RunOrder":1
              }
            ]
          }
        ],
        "ArtifactStore":{
          "Type":"S3",
          "Location":{
            "Fn::Join":[
              "",
              [
                {
                  "Ref":"BucketName"
                },
                "-",
                {
                  "Ref":"AWS::StackName"
                }
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs":{
    "StackName":{
      "Description":"StackName for this stack",
      "Value":{
        "Ref":"AWS::StackName"
      }
    },
    "CFNBucket":{
      "Description":"Generated S3 BucketName",
      "Value":{
        "Ref":"CFNBucket"
      }
    },
    "CodePipelineURL":{
      "Description":"URL for generated pipeline in CodePipeline console",
      "Value":{
        "Fn::Join":[
          "",
          [
            "https://console.aws.amazon.com/codepipeline/home?region=",
            {
              "Ref":"AWS::Region"
            },
            "#/view/",
            {
              "Ref":"CodePipelineStack"
            }
          ]
        ]
      }
    },
    "OpsWorksStackId":{
      "Description":"Stack ID generated by OpsWorks",
      "Value":{
        "Ref":"myStack"
      }
    },
    "OpsWorksAppId":{
      "Description":"App ID generated by OpsWorks",
      "Value":{
        "Ref":"myApp"
      }
    },
    "OpsWorksViaLambdaCustomActionType":{
      "Description":"CodePipeline Deploy Custom action name",
      "Value":{
        "Ref":"AWS::StackName"
      }
    },
    "OpsWorksInstance":{
      "Description":"Instance launched by OpsWorks",
      "Value":{
        "Ref":"myAppInstance1"
      }
    },
    "SNSLambdaFunctionARN":{
      "Description":"Lambda Function Name ARN ",
      "Value":{
        "Fn::Join":[
          "",
          [
            "arn:aws:lambda:",
            {
              "Ref":"AWS::Region"
            },
            ":function:",
            {
              "Ref":"ProcessSNSMessages"
            }
          ]
        ]
      }
    },
    "SNSLambdaTopic":{
      "Description":"SNS Topic used by Lambda function",
      "Value":{
        "Ref":"SNSLambdaTopic"
      }
    },
    "OpsWorksBucketName":{
      "Description":"S3 bucket generated for OpsWorks artifacts.",
      "Value":{
        "Fn::Join":[
          "",
          [
            {
              "Ref":"BucketName"
            },
            "-",
            {
              "Ref":"AWS::StackName"
            }
          ]
        ]
      }
    }
  }
}