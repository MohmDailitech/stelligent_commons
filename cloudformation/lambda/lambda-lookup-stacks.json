{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"Stelligent CloudFormation template uses template.json for the calling template. ** This template creates one or more Amazon resources. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters":{
    "NetworkStackName":{
      "Type":"String",
      "Description":"CFN Stack Name for the Network Stack"
    }
  },
  "Resources":{
    "lambdaExecutionRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Action":[
                "sts:AssumeRole"
              ],
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version":"2012-10-17"
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyDocument":{
              "Statement":[
                {
                  "Action":[
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect":"Allow",
                  "Resource":"arn:aws:logs:*:*:*"
                },
                {
                  "Action":[
                    "cloudformation:DescribeStacks",
                    "cloudformation:ListStackResources"
                  ],
                  "Effect":"Allow",
                  "Resource":"*"
                }
              ],
              "Version":"2012-10-17"
            },
            "PolicyName":"root"
          }
        ]
      }
    },
    "lookupStackResources":{
      "Type":"AWS::Lambda::Function",
      "Properties":{
        "Code":{
          "ZipFile":{
            "Fn::Join":[
              "",
              [
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "  console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                "  if (event.RequestType == 'Delete') {",
                "    response.send(event, context, response.SUCCESS);",
                "    return;",
                "  }",
                "  var stackName = event.ResourceProperties.StackName;",
                "  var responseData = {};",
                "  if (stackName) {",
                "    var aws = require('aws-sdk');",
                "    var cfn = new aws.CloudFormation();",
                "    cfn.listStackResources({StackName: stackName}, function(err, data) {",
                "        if (err) {",
                "          responseData = {Error: 'listStackResources call failed'};",
                "          console.log(responseData.Error + ':\\n', err);",
                "          response.send(event, context, response.FAILED, responseData);",
                "        }",
                "        else {",
                "          data.StackResourceSummaries.forEach(function(output) {",
                "            responseData[output.LogicalResourceId] = output.PhysicalResourceId;",
                "          });",
                "          response.send(event, context, response.SUCCESS, responseData);",
                "        }",
                "    });",
                "  } else {",
                "      responseData = {Error: 'Stack name not specified'};",
                "      console.log(responseData.Error);",
                "      response.send(event, context, response.FAILED, responseData);",
                "  }",
                "};"
              ]
            ]
          }
        },
        "Runtime":"nodejs",
        "Role":{
          "Fn::GetAtt":[
            "lambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout":"30",
        "Handler":"index.handler"
      }
    },
    "NetworkResources":{
      "Type":"Custom::NetworkResources",
      "Properties":{
        "ServiceToken":{
          "Fn::Join":[
            "",
            [
              "arn:aws:lambda:",
              {
                "Ref":"AWS::Region"
              },
              ":",
              {
                "Ref":"AWS::AccountId"
              },
              ":function:",
              {
                "Ref":"lookupStackResources"
              }
            ]
          ]
        },
        "StackName":{
          "Ref":"NetworkStackName"
        }
      }
    }
  },
  "Outputs":{
    "MyAWSAccountId":{
      "Value":{
        "Ref":"AWS::AccountId"
      }
    },
    "CallingQueue":{
      "Value":{
        "Fn::GetAtt":[
          "NetworkResources",
          "MyQueue"
        ]
      }
    },
    "LambaFunctionServiceToken":{
      "Value":{
        "Fn::Join":[
          "",
          [
            "arn:aws:lambda:",
            {
              "Ref":"AWS::Region"
            },
            ":",
            {
              "Ref":"AWS::AccountId"
            },
            ":function:",
            {
              "Ref":"lookupStackResources"
            }
          ]
        ]
      }
    }
  }
}