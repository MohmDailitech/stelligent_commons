{
  "Description":"Launch nested CloudFormation stack to provision and run AWS CodeDeploy",
  "AWSTemplateFormatVersion":"2010-09-09",
  "Parameters":{
    "S3Bucket":{
      "Type":"String",
      "Description":"The unique bucket name where deployment distribution is located"
    },
    "S3Key":{
      "Type":"String",
      "Description":"The unique bucket name where deployment distribution is located"
    },
    "EC2TagValue":{
      "Description":"The tag value that identifies this as a target for deployments.",
      "Type":"String",
      "AllowedPattern":"[\\x20-\\x7E]*",
      "ConstraintDescription":"Can contain only ASCII characters."
    },
    "EC2KeyPairName":{
      "Description":"Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the instances.",
      "Type":"AWS::EC2::KeyPair::KeyName",
      "MinLength":"1",
      "MaxLength":"255",
      "AllowedPattern":"[\\x20-\\x7E]*",
      "ConstraintDescription":"Can contain only ASCII characters."
    }
  },
  "Resources":{
    "CodeDeployEC2InstancesStack":{
      "Type":"AWS::CloudFormation::Stack",
      "Properties":{
        "TemplateURL":"http://s3.amazonaws.com/aws-codedeploy-us-east-1/templates/latest/CodeDeploy_SampleCF_Template.json",
        "TimeoutInMinutes":"60",
        "Parameters":{
          "TagValue":{
            "Ref":"EC2TagValue"
          },
          "KeyPairName":{
            "Ref":"EC2KeyPairName"
          }
        }
      }
    },
    "CodeDeploySimpleStack":{
      "Type":"AWS::CloudFormation::Stack",
      "DependsOn":"CodeDeployEC2InstancesStack",
      "Properties":{
        "TemplateURL":"https://s3.amazonaws.com/stelligent-training-public/public/codedeploy-deployment.json",
        "TimeoutInMinutes":"60",
        "Parameters":{
          "TagValue":{
            "Ref":"EC2TagValue"
          },
          "RoleArn":{
            "Fn::GetAtt":[
              "CodeDeployEC2InstancesStack",
              "Outputs.CodeDeployTrustRoleARN"
            ]
          },
          "Bucket":{
            "Ref":"S3Bucket"
          },
          "Key":{
            "Ref":"S3Key"
          }
        }
      }
    },
    "WebServerInfo":{
      "Type":"Custom::WebServerInfo",
      "DependsOn":"CodeDeployEC2InstancesStack",
      "Properties":{
        "ServiceToken":{
          "Fn::GetAtt":[
            "LookupStackOutputs",
            "Arn"
          ]
        },
        "StackName":{
          "Ref":"CodeDeployEC2InstancesStack"
        }
      }
    },
    "LookupStackOutputs":{
      "Type":"AWS::Lambda::Function",
      "Properties":{
        "Handler":"index.handler",
        "Role":{
          "Fn::GetAtt":[
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code":{
          "ZipFile":{
            "Fn::Join":[
              "\n",
              [
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                "    if (event.RequestType == 'Delete') {",
                "        response.send(event, context, response.SUCCESS);",
                "        return;",
                "    }",
                "    var stackName = event.ResourceProperties.StackName;",
                "    var responseData = {};",
                "    if (stackName) {",
                "        var aws = require('aws-sdk');",
                "        var cfn = new aws.CloudFormation();",
                "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
                "            if (err) {",
                "                responseData = {Error: 'DescribeStacks call failed'};",
                "                console.log(responseData.Error + ':\\n', err);",
                "                response.send(event, context, response.FAILED, responseData);",
                "            }",
                "            else {",
                "                data.Stacks[0].Outputs.forEach(function(output) {",
                "                    responseData[output.OutputKey] = output.OutputValue;",
                "                });",
                "                response.send(event, context, response.SUCCESS, responseData);",
                "            }",
                "        });",
                "    } else {",
                "        responseData = {Error: 'Stack name not specified'};",
                "        console.log(responseData.Error);",
                "        response.send(event, context, response.FAILED, responseData);",
                "    }",
                "};"
              ]
            ]
          }
        },
        "Runtime":"nodejs",
        "Timeout":"30"
      }
    },
    "LambdaExecutionRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "lambda.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"root",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource":"arn:aws:logs:*:*:*"
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs":{
    "CodeDeployEC2InstanceURL":{
      "Value":{
        "Fn::GetAtt":[
          "WebServerInfo",
          "LinuxEC2Instance"
        ]
      }
    }
  }
}